
void split_input_to_visible(Mat& input, Mat* channels)
{
    int nRows = input.rows;
    int nCols = input.cols;

    Mat red         = Mat(nRows, nCols, CV_8U);
    Mat green       = Mat(nRows, nCols, CV_8U);
    Mat blue        = Mat(nRows, nCols, CV_8U);
    Mat yellow      = Mat(nRows, nCols, CV_8U);
    Mat intensity   = Mat(nRows, nCols, CV_8U);

    Vec3b *in_p;

    int x,y;
    int r, g, b, i, R, G, B, Y;
    uchar *r_p, *b_p, *y_p, *g_p, *i_p;

    for( x = 0; x < nRows; ++x)
    {
        in_p  = input.ptr<Vec3b>(x);

        r_p   = red.ptr<uchar>(x);
        g_p   = green.ptr<uchar>(x);
        b_p   = blue.ptr<uchar>(x);
        y_p   = yellow.ptr<uchar>(x);
        i_p   = intensity.ptr<uchar>(x);

        for ( y = 0; y < nCols; ++y)
        {
            i = ((in_p[y])[0] + (in_p[y])[1] + (in_p[y])[2])/(3);

            if (i > 0)
            {

                // For testing reasons. Output images directly
                b = (in_p[y])[0];
                g = (in_p[y])[1];
                r = (in_p[y])[2];

                R = 2*r - (b+g);
                G = 2*g - (b+r);
                B = 2*b - (r+g);
                Y = -B - std::abs(r-g);

                i_p[y] = i;
                b_p[y] = (B>0) ? B : 0;
                r_p[y] = (R>0) ? R : 0;
                g_p[y] = (G>0) ? G : 0;
                y_p[y] = (Y>0) ? Y : 0;
            } else {
                b_p[y] = 0;
                r_p[y] = 0;
                g_p[y] = 0;
                y_p[y] = 0;
            }
        }
    }
    channels[0] = red;
    channels[1] = green;
    channels[2] = blue;
    channels[3] = yellow;
    channels[4] = intensity;


    cout << "reaches output" << endl;

}
